{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","SearchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","console","log","target","value","searchfield","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCFSC,EAdH,SAACC,GACT,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,cACpB,6BACI,4BACIJ,EAAMK,MAEV,2BAAIL,EAAMM,UCSXC,EAfE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAChB,OACA,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGP,GAAMI,EAAOG,GAAGP,GAAIC,KAAOG,EAAOG,GAAGN,KAAMC,MAAQE,EAAOG,GAAGL,aCI3EO,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKb,UAAU,OACX,2BAAOA,UAAU,mCACjBc,KAAO,SACPC,YAAY,gBACZC,SAAYH,MCKTI,G,MAVD,SAAClB,GACX,OACI,yBAAKmB,MAAS,CAACC,SAAS,SAAWC,OAAQ,kBAAoBC,OAAQ,UAE/DtB,EAAMuB,YCqBPC,E,YAxBX,WAAYxB,GAAO,IAAD,8BACd,4CAAMA,KACDyB,MAAQ,CACTC,UAAW,GAHD,E,+EAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAMpB,OAAGG,KAAKJ,MAAMC,SACH,yDAGDG,KAAK7B,MAAMuB,a,GAnBNQ,aC6DZC,E,YAtDb,aAAc,IAAD,8BACX,+CAQFC,eAAe,SAACC,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKR,SAAS,CAACS,YAAaL,EAAMG,OAAOC,SATzC,EAAKb,MAAQ,CACXjB,OAAQ,GACR+B,YAAa,IAJJ,E,iFAcO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKd,SAAS,CAACtB,OAAQoC,S,+BAMlB,IAAD,OAEAC,EAAiBhB,KAAKJ,MAAMjB,OAAOsC,QAAO,SAAAtC,GAC9C,OAAOA,EAAOH,KAAK0C,cAAcC,SAAS,EAAKvB,MAAMc,YAAYQ,kBAEnE,OAA8B,IAA3BlB,KAAKJ,MAAMjB,OAAOyC,OAEZ,0CAGL,yBAAKhD,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAgBe,KAAKI,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAUqC,KAFxB,U,GAxCQd,aCFlBmB,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.b996506d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card= (props) => {\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robos' src={`https://robohash.org/${props.id}?200x200`} />\r\n            <div>\r\n                <h2>\r\n                   {props.name} \r\n                </h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ( {robots} ) =>{\r\n    return (\r\n    <div>\r\n        {\r\n        robots.map((user,i)=>{\r\n        return <Card key={i} id = {robots[i].id} name= {robots[i].name} email= {robots[i].email}/>;\r\n        \r\n    }) \r\n}\r\n    </div>\r\n    );\r\n} \r\n\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox = ({SearchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' \r\n            type = 'search' \r\n            placeholder='search robots'\r\n            onChange = {SearchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default SearchBox; ","import React from 'react'\r\n\r\nconst Scroll =(props) => {\r\n    return (\r\n        <div style = {{overflow:'scroll' , border: '2px solid black' , height: '500px'}}>\r\n            {\r\n                props.children\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n            if(this.state.hasError){\r\n                return <h1>OOOOPS!!! this is no good</h1>\r\n            }else{\r\n\r\n               return this.props.children;\r\n            }\r\n        \r\n    }\r\n}\r\n\r\nexport default ErrorBoundry\r\n","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry'\r\n\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n\r\n  onSearchChange=(event)=>{\r\n    console.log(event.target.value)\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>{\r\n      return response.json();\r\n    })\r\n    .then(users=>{\r\n      this.setState({robots: users})\r\n    })\r\n    \r\n  }\r\n\r\n\r\n  render(){\r\n    \r\n    const filteredRobots = this.state.robots.filter(robots =>{\r\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    if(this.state.robots.length===0)\r\n    {\r\n      return <h1>Loading...</h1>\r\n    }else{\r\n      return (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox SearchChange = {this.onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots = {filteredRobots} />\r\n            </ErrorBoundry>>\r\n            \r\n          </Scroll>\r\n          \r\n  \r\n        </div>\r\n        \r\n    );\r\n    }\r\n  }\r\n   \r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\nReactDOM.render( <App/>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}